#include<stdio.h>
struct node
{
    int val;
    struct node*left;
    struct node*right;

};
struct node*newnode(int value)
{
    struct node*temp=malloc(sizeof(struct node));
    temp->val=value;
    temp->left=temp->right=NULL;
    return temp;
}
struct node*insert(struct node*root,int value)
{
    if(root==NULL)
        return newnode(value);
    else if(value<root->val)
        root->left=insert(root->left,value);
    else if(value>root->val)
        root->right=insert(root->right,value);
    return root;
}
void inorder(struct node*root)
{
    if(root!=NULL)
    {
        inorder(root->left);
        printf(" %d",root->val);
        inorder(root->right);
    }
}
void preorder(struct node*root)
{
    if(root!=NULL)
    {
        printf(" %d",root->val);
        preorder(root->left);
        preorder(root->right);
    }
}
void postorder(struct node*root)
{
    if(root!=NULL)
    {
        postorder(root->left);
        postorder(root->right);
        printf(" %d",root->val);
    }
}
int main()
{
    struct node*root=NULL;
    int n,i,choice,p;
    printf("1.Insert\n2.inorder\n3.preorder\n4.postorder\n5.exit\n");
    while(1)
    {
        printf("\nEnter your choice: ");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
            printf("Enter the total number of nodes you want to insert:");
            scanf("%d",&n);
            printf("Enter values to insert:");
            scanf("%d ",&p);
            root=insert(root,p);
            for(i=1;i<n;i++)
            {
                scanf("%d",&p);
                insert(root,p);
            }
            break;
        case 2:
            inorder(root);
            break;
        case 3:
            preorder(root);
            break;
        case 4:
            postorder(root);
            break;
        case 5:
            exit(0);
        default:
            printf("Enter valid choice:");
        }
    }
}

#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

// Queue pointers
struct node *front = NULL, *rear = NULL;

// Stack pointer
struct node *head = NULL;

// Queue functions
void enqueue(int val) {
    struct node *newNode = malloc(sizeof(struct node));
    newNode->data = val;
    newNode->next = NULL;

    // If it is the first node in the queue
    if (front == NULL && rear == NULL)
        front = rear = newNode;
    else {
        rear->next = newNode;
        rear = newNode;
    }
}

void dequeue() {
    struct node *temp;
    if (front == NULL) {
        printf("Queue is Empty. Unable to perform dequeue\n");
    } else {
        temp = front;
        front = front->next;

        if (front == NULL)
            rear = NULL;

        printf("Dequeued element = %d\n", temp->data);
        free(temp);
    }
}

// Stack functions
void push(int val) {
    struct node *newNode = malloc(sizeof(struct node));
    newNode->data = val;
    newNode->next = head;
    head = newNode;
}

void pop() {
    struct node *temp;
    if (head == NULL) {
        printf("Stack is Empty\n");
    } else {
        printf("Popped element = %d\n", head->data);
        temp = head;
        head = head->next;
        free(temp);
    }
}

void print(struct node*k) {
    struct node *temp = k;
    while (temp) {
        printf("%d->", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
int ch,val,val1;
printf("Operations of Queue\n");
printf("\n1.enqueue \n2.dequeue \n3.printqueue \n4.exit");
printf("\nOperations of Stack\n");
printf("\n5.push \n6.pop \n7.printstack ");

while(1){
    printf("\nEnter choice\n");
    scanf("%d",&ch);
    switch(ch){
        case 1:printf("\nEnter value to insert");
                scanf("%d",&val);
                enqueue(val);
                break;

        case 2:dequeue();
                break;

        case 3:print(front);
                break;

        case 4:exit(0);
                break;

        case 5:printf("Enter value to insert");
                scanf("%d",&val1);
                push(val1);
                break;

        case 6:pop();
                break;

        case 7:print(head);
                break;

        default:printf("enter valid choice");
                break;
    }
}

    return 0;
}
